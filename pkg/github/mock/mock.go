// Code generated by MockGen. DO NOT EDIT.
// Source: ./github.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/mjhd-devlion/wip-kun/pkg/github"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ListCommits mocks base method
func (m *MockClient) ListCommits(ctx context.Context, prNumber int) ([]github.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", ctx, prNumber)
	ret0, _ := ret[0].([]github.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommits indicates an expected call of ListCommits
func (mr *MockClientMockRecorder) ListCommits(ctx, prNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockClient)(nil).ListCommits), ctx, prNumber)
}

// AddLabel mocks base method
func (m *MockClient) AddLabel(ctx context.Context, prNumber int, label github.Label) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabel", ctx, prNumber, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabel indicates an expected call of AddLabel
func (mr *MockClientMockRecorder) AddLabel(ctx, prNumber, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabel", reflect.TypeOf((*MockClient)(nil).AddLabel), ctx, prNumber, label)
}

// RemoveLabel mocks base method
func (m *MockClient) RemoveLabel(ctx context.Context, prNumber int, label github.Label) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLabel", ctx, prNumber, label)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLabel indicates an expected call of RemoveLabel
func (mr *MockClientMockRecorder) RemoveLabel(ctx, prNumber, label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLabel", reflect.TypeOf((*MockClient)(nil).RemoveLabel), ctx, prNumber, label)
}

// UpdatePullRequestTitle mocks base method
func (m *MockClient) UpdatePullRequestTitle(ctx context.Context, prNumber int, title string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestTitle", ctx, prNumber, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePullRequestTitle indicates an expected call of UpdatePullRequestTitle
func (mr *MockClientMockRecorder) UpdatePullRequestTitle(ctx, prNumber, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestTitle", reflect.TypeOf((*MockClient)(nil).UpdatePullRequestTitle), ctx, prNumber, title)
}
